name: Deploy Go App to EC2 (Build on EC2)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23' # Specify the Go version for your application
      - name: SSH and Build on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "Starting deployment..."
            APP_NAME=user-api
            REMOTE_REPO_DIR=/home/${{ secrets.EC2_USER }}/source # Directory to clone the repo
            REMOTE_BUILD_DIR=/home/${{ secrets.EC2_USER }}/build # Directory to build
            REMOTE_APP_DIR=/opt/app     # Directory to run the app
            GITHUB_REPOSITORY=https://github.com/cyworld8x/go-postgres-kubernetes-grpc.git

            # Ensure remote directories exist
            sudo scp -rfv $REMOTE_BUILD_DIR
            sudo scp -rfv $REMOTE_APP_DIR
            mkdir -p $REMOTE_REPO_DIR
            mkdir -p $REMOTE_BUILD_DIR/cmd/user/config
            sudo mkdir -p $REMOTE_APP_DIR

            # Clone the repository (or pull if it exists)
            if [ -d "$REMOTE_REPO_DIR/.git" ]; then
              echo "Repository already exists, pulling latest changes..."
              cd $REMOTE_REPO_DIR
              git pull origin main
            else
              echo "Cloning repository..."
              git clone --depth 1 $GITHUB_REPOSITORY $REMOTE_REPO_DIR
            fi

            # Build the application
            echo "Building the application..."
            cd $REMOTE_REPO_DIR/cmd/user
            go build -o $REMOTE_BUILD_DIR/$APP_NAME $REMOTE_REPO_DIR/cmd/user
            
            cp $REMOTE_REPO_DIR/cmd/user/config/app.env $REMOTE_BUILD_DIR/cmd/user/config

             # --- Setup Systemd Service ---
            SERVICE_NAME=$APP_NAME.service
            SERVICE_FILE=/etc/systemd/system/$SERVICE_NAME

            echo "Creating systemd service file: $SERVICE_FILE"
            sudo tee $SERVICE_FILE > /dev/null <<EOF
            [Unit]
            Description=Go User API Service
            After=network.target

            [Service]
            User=${{ secrets.EC2_USER }}
            WorkingDirectory=$REMOTE_APP_DIR/build
            ExecStart=$REMOTE_APP_DIR/build/$APP_NAME
            Restart=on-failure
            RestartSec=5
            StandardOutput=journal
            StandardError=journal
            SyslogIdentifier=$APP_NAME

            [Install]
            WantedBy=multi-user.target
            EOF

              # --- Setup nginx proxy pass config file ---
            NGNIX_FILE_NAME=${{ secrets.API_URL }}.conf
            NGNIX_FILE=/etc/nginx/conf.d/$NGNIX_FILE_NAME

            echo "Creating nginx proxy pass config file: $NGNIX_FILE"
            sudo tee $NGNIX_FILE > /dev/null <<EOF
            server {
              listen 5002; # Nginx listens on port for incoming HTTP requests
              server_name ${{ secrets.API_URL }}; # Replace with your domain name

              # Optional: Redirect HTTP to HTTPS if you have SSL configured
              # listen 443 ssl;
              # ssl_certificate /etc/nginx/ssl/your_domain.crt;
              # ssl_certificate_key /etc/nginx/ssl/your_domain.key;
              # server_name your_domain.com www.your_domain.com;

              location / {
                  # This is the core of the proxy configuration.
                  # Nginx will forward requests to your Go application running on port 8080.
                  proxy_pass http://127.0.0.1:5004;

                  # Optional: Add these headers for better proxy behavior
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  
                  # Optional: handle WebSocket if your Go app uses it
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";

                  # Optional: Adjust proxy timeouts if your Go app has long-running requests
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }

              listen 443 ssl; # managed by Certbot
              ssl_certificate /etc/letsencrypt/live/${{ secrets.API_URL }}/fullchain.pem; # managed by Certbot
              ssl_certificate_key /etc/letsencrypt/${{ secrets.API_URL }}/privkey.pem; # managed by Certbot
              include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
              ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

              # Optional: Serve static files directly from Nginx (e.g., frontend assets)
              # location /static/ {
              #     alias /var/www/your_domain/static/;
              #     expires 30d;
              #     access_log off;
              #     log_not_found off;
              # }

              # Optional: Error pages
              error_page 500 502 503 504 /50x.html;
              location = /50x.html {
                  root /usr/share/nginx/html;
              }
            }
            EOF
                
            echo "Reloading nginx configuration..."
            sudo systemctl reload nginx
            echo "Enabling and starting nginx service..."
            sudo systemctl enable nginx
            sudo systemctl start nginx
            echo "Checking nginx status..."
            sudo systemctl status nginx --no-pager # --no-pager prevents pagination
            echo "Checking nginx configuration..."
            sudo nginx -t

            echo "Stopping and starting the application..."
            sudo systemctl stop $SERVICE_NAME

            sudo scp -r $REMOTE_BUILD_DIR $REMOTE_APP_DIR 
            echo "Reloading systemd daemon..."
            sudo systemctl daemon-reload

            echo "Enabling and starting the service: $SERVICE_NAME"
            sudo systemctl enable $SERVICE_NAME
            sudo systemctl start $SERVICE_NAME

            echo "Checking service status..."
            sudo systemctl status $SERVICE_NAME --no-pager # --no-pager prevents pagination

            echo "Deployment complete!"
