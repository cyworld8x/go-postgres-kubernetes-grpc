// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type EventSlotStatus string

const (
	EventSlotStatusNew       EventSlotStatus = "New"
	EventSlotStatusClosed    EventSlotStatus = "Closed"
	EventSlotStatusCancelled EventSlotStatus = "Cancelled"
)

func (e *EventSlotStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventSlotStatus(s)
	case string:
		*e = EventSlotStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EventSlotStatus: %T", src)
	}
	return nil
}

type NullEventSlotStatus struct {
	EventSlotStatus EventSlotStatus `json:"event_slot_status"`
	Valid           bool            `json:"valid"` // Valid is true if EventSlotStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventSlotStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EventSlotStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventSlotStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventSlotStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventSlotStatus), nil
}

type EventStatus string

const (
	EventStatusPlanned   EventStatus = "Planned"
	EventStatusOpen      EventStatus = "Open"
	EventStatusClosed    EventStatus = "Closed"
	EventStatusCancelled EventStatus = "Cancelled"
)

func (e *EventStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventStatus(s)
	case string:
		*e = EventStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EventStatus: %T", src)
	}
	return nil
}

type NullEventStatus struct {
	EventStatus EventStatus `json:"event_status"`
	Valid       bool        `json:"valid"` // Valid is true if EventStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EventStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventStatus), nil
}

type Event struct {
	ID               uuid.UUID        `json:"id"`
	EventName        string           `json:"event_name"`
	Note             string           `json:"note"`
	Revenue          float32          `json:"revenue"`
	Status           EventStatus      `json:"status"`
	TotalSoldTickets int32            `json:"total_sold_tickets"`
	EventOwnerID     uuid.UUID        `json:"event_owner_id"`
	Created          pgtype.Timestamp `json:"created"`
	Updated          pgtype.Timestamp `json:"updated"`
}

type EventSlot struct {
	ID          uuid.UUID        `json:"id"`
	SlotName    string           `json:"slot_name"`
	Description string           `json:"description"`
	Price       float32          `json:"price"`
	Capacity    int32            `json:"capacity"`
	Status      EventSlotStatus  `json:"status"`
	StartTime   pgtype.Timestamp `json:"start_time"`
	EndTime     pgtype.Timestamp `json:"end_time"`
	EventID     uuid.UUID        `json:"event_id"`
	Created     pgtype.Timestamp `json:"created"`
	Updated     pgtype.Timestamp `json:"updated"`
}
