// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type TicketStatus string

const (
	TicketStatusNew       TicketStatus = "New"
	TicketStatusBooked    TicketStatus = "Booked"
	TicketStatusCheckedIn TicketStatus = "CheckedIn"
	TicketStatusInStock   TicketStatus = "InStock"
)

func (e *TicketStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TicketStatus(s)
	case string:
		*e = TicketStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TicketStatus: %T", src)
	}
	return nil
}

type NullTicketStatus struct {
	TicketStatus TicketStatus `json:"ticket_status"`
	Valid        bool         `json:"valid"` // Valid is true if TicketStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTicketStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TicketStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TicketStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTicketStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TicketStatus), nil
}

type UserTicket struct {
	ID          uuid.UUID        `json:"id"`
	Code        string           `json:"code"`
	EventSlotID uuid.UUID        `json:"event_slot_id"`
	Status      TicketStatus     `json:"status"`
	Price       float32          `json:"price"`
	Issued      pgtype.Timestamp `json:"issued"`
	BuyerID     pgtype.UUID      `json:"buyer_id"`
}
