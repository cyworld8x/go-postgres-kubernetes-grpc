// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/usecases/sessions/interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/cyworld8x/go-postgres-kubernetes-grpc/internal/user/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// BlockSession mocks base method.
func (m *MockUseCase) BlockSession(ctx context.Context, sessionID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSession", ctx, sessionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockSession indicates an expected call of BlockSession.
func (mr *MockUseCaseMockRecorder) BlockSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSession", reflect.TypeOf((*MockUseCase)(nil).BlockSession), ctx, sessionID)
}

// DeleteSession mocks base method.
func (m *MockUseCase) DeleteSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockUseCaseMockRecorder) DeleteSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockUseCase)(nil).DeleteSession), ctx, sessionID)
}

// GenerateSession mocks base method.
func (m *MockUseCase) GenerateSession(ctx context.Context, username, token string, duration time.Duration) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSession", ctx, username, token, duration)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSession indicates an expected call of GenerateSession.
func (mr *MockUseCaseMockRecorder) GenerateSession(ctx, username, token, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSession", reflect.TypeOf((*MockUseCase)(nil).GenerateSession), ctx, username, token, duration)
}

// GetSession mocks base method.
func (m *MockUseCase) GetSession(ctx context.Context, sessionID string) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionID)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockUseCaseMockRecorder) GetSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockUseCase)(nil).GetSession), ctx, sessionID)
}

// GetSessionByUserID mocks base method.
func (m *MockUseCase) GetSessionByUserID(ctx context.Context, username string) ([]*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUserID", ctx, username)
	ret0, _ := ret[0].([]*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUserID indicates an expected call of GetSessionByUserID.
func (mr *MockUseCaseMockRecorder) GetSessionByUserID(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUserID", reflect.TypeOf((*MockUseCase)(nil).GetSessionByUserID), ctx, username)
}

// ListSessions mocks base method.
func (m *MockUseCase) ListSessions(ctx context.Context) ([]*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessions", ctx)
	ret0, _ := ret[0].([]*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessions indicates an expected call of ListSessions.
func (mr *MockUseCaseMockRecorder) ListSessions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockUseCase)(nil).ListSessions), ctx)
}

// UpdateSession mocks base method.
func (m *MockUseCase) UpdateSession(ctx context.Context, session *domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockUseCaseMockRecorder) UpdateSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockUseCase)(nil).UpdateSession), ctx, session)
}
