// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const ChangeUserPassword = `-- name: ChangeUserPassword :exec
UPDATE "db"."users"
  set password = $3,
  updated = now()
WHERE username = $2 AND id = $1
`

type ChangeUserPasswordParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Password string    `json:"password"`
}

func (q *Queries) ChangeUserPassword(ctx context.Context, arg ChangeUserPasswordParams) error {
	_, err := q.db.Exec(ctx, ChangeUserPassword, arg.ID, arg.Username, arg.Password)
	return err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO "db"."users" (
  username, email, display_name, password, role, code
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, code, username, display_name, password, email, status, role, created, updated
`

type CreateUserParams struct {
	Username    string      `json:"username"`
	Email       pgtype.Text `json:"email"`
	DisplayName pgtype.Text `json:"display_name"`
	Password    string      `json:"password"`
	Role        int32       `json:"role"`
	Code        string      `json:"code"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (DbUser, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.Username,
		arg.Email,
		arg.DisplayName,
		arg.Password,
		arg.Role,
		arg.Code,
	)
	var i DbUser
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.Email,
		&i.Status,
		&i.Role,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const DeactiveUser = `-- name: DeactiveUser :exec
UPDATE "db"."users"
  set status = false
WHERE id = $1
`

func (q *Queries) DeactiveUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeactiveUser, id)
	return err
}

const GetLogin = `-- name: GetLogin :one
SELECT id, code, username, display_name, password, email, status, role, created, updated FROM "db"."users"
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetLogin(ctx context.Context, username string) (DbUser, error) {
	row := q.db.QueryRow(ctx, GetLogin, username)
	var i DbUser
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.Email,
		&i.Status,
		&i.Role,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const GetUser = `-- name: GetUser :one
SELECT id, code, username, display_name, password, email, status, role, created, updated FROM "db"."users"
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (DbUser, error) {
	row := q.db.QueryRow(ctx, GetUser, id)
	var i DbUser
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.Email,
		&i.Status,
		&i.Role,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, code, username, display_name, password, email, status, role, created, updated FROM "db"."users"
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]DbUser, error) {
	rows, err := q.db.Query(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DbUser
	for rows.Next() {
		var i DbUser
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Username,
			&i.DisplayName,
			&i.Password,
			&i.Email,
			&i.Status,
			&i.Role,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUserInfo = `-- name: UpdateUserInfo :exec
UPDATE "db"."users"
  set email = $4,
  display_name = $3
WHERE username = $2 AND id = $1
`

type UpdateUserInfoParams struct {
	ID          uuid.UUID   `json:"id"`
	Username    string      `json:"username"`
	DisplayName pgtype.Text `json:"display_name"`
	Email       pgtype.Text `json:"email"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) error {
	_, err := q.db.Exec(ctx, UpdateUserInfo,
		arg.ID,
		arg.Username,
		arg.DisplayName,
		arg.Email,
	)
	return err
}
