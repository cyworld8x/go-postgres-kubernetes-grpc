// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: pkg/pb/proto/rpc_ticket_service .proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	CreateTickets(ctx context.Context, in *CreateTicketsRequest, opts ...grpc.CallOption) (*CreateTicketsResponse, error)
	SellTicket(ctx context.Context, in *SellTicketRequest, opts ...grpc.CallOption) (*SellTicketResponse, error)
	CheckIn(ctx context.Context, in *CheckinTicketRequest, opts ...grpc.CallOption) (*CheckinTicketResponse, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) CreateTickets(ctx context.Context, in *CreateTicketsRequest, opts ...grpc.CallOption) (*CreateTicketsResponse, error) {
	out := new(CreateTicketsResponse)
	err := c.cc.Invoke(ctx, "/pb.TicketService/CreateTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) SellTicket(ctx context.Context, in *SellTicketRequest, opts ...grpc.CallOption) (*SellTicketResponse, error) {
	out := new(SellTicketResponse)
	err := c.cc.Invoke(ctx, "/pb.TicketService/SellTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) CheckIn(ctx context.Context, in *CheckinTicketRequest, opts ...grpc.CallOption) (*CheckinTicketResponse, error) {
	out := new(CheckinTicketResponse)
	err := c.cc.Invoke(ctx, "/pb.TicketService/CheckIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	CreateTickets(context.Context, *CreateTicketsRequest) (*CreateTicketsResponse, error)
	SellTicket(context.Context, *SellTicketRequest) (*SellTicketResponse, error)
	CheckIn(context.Context, *CheckinTicketRequest) (*CheckinTicketResponse, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) CreateTickets(context.Context, *CreateTicketsRequest) (*CreateTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTickets not implemented")
}
func (UnimplementedTicketServiceServer) SellTicket(context.Context, *SellTicketRequest) (*SellTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellTicket not implemented")
}
func (UnimplementedTicketServiceServer) CheckIn(context.Context, *CheckinTicketRequest) (*CheckinTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_CreateTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).CreateTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TicketService/CreateTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).CreateTickets(ctx, req.(*CreateTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_SellTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).SellTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TicketService/SellTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).SellTicket(ctx, req.(*SellTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckinTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TicketService/CheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).CheckIn(ctx, req.(*CheckinTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTickets",
			Handler:    _TicketService_CreateTickets_Handler,
		},
		{
			MethodName: "SellTicket",
			Handler:    _TicketService_SellTicket_Handler,
		},
		{
			MethodName: "CheckIn",
			Handler:    _TicketService_CheckIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/proto/rpc_ticket_service .proto",
}
